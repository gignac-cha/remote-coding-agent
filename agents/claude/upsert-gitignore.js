/**
 * @file upsert-gitignore.js
 * @description A robust script to handle .gitignore updates based on environment variables.
 * This script is designed to be called from a shell script and reads its configuration
 * from environment variables to provide flexible .gitignore file management.
 */

const fs = require('fs');
const path = require('path');

/**
 * Main function to process the .gitignore file.
 *
 * Environment Variables:
 * - GITIGNORE: The content to be added to the .gitignore file.
 * - GITIGNORE_MODE: The method to use for updating the file.
 *   - 'append' (default): Adds new content to the end of the file.
 *   - 'overwrite': Replaces the entire file with the new content.
 *   - 'merge': Combines old and new content, then sorts and removes duplicates.
 * - GITIGNORE_SORT: When 'true', sorts the lines of the final file (for 'append' mode).
 * - GITIGNORE_DEDUP: When 'true', removes duplicate lines (for 'append' mode).
 */
function main() {
    // Construct the absolute path to the .gitignore file in the current working directory.
    const gitignorePath = path.join(process.cwd(), '.gitignore');
    const newContent = process.env.GITIGNORE;

    // Read configuration from environment variables, with 'append' as the default mode.
    const mode = process.env.GITIGNORE_MODE || 'append';
    const sort = process.env.GITIGNORE_SORT === 'true';
    const dedup = process.env.GITIGNORE_DEDUP === 'true';

    // Read existing .gitignore content if the file already exists.
    let existingContent = '';
    if (fs.existsSync(gitignorePath)) {
        existingContent = fs.readFileSync(gitignorePath, 'utf8');
    }

    let finalContent = '';
    let lines = [];

    // Process the content based on the selected mode.
    switch (mode) {
        case 'overwrite':
            console.log('Mode: overwrite. Replacing .gitignore content.');
            finalContent = newContent;
            break;

        case 'append':
            console.log('Mode: append. Appending to .gitignore.');
            // Combine existing and new content, then process for sorting and deduplication.
            lines = (existingContent ? `${existingContent}\n${newContent}` : newContent).split('\n');
            processLines();
            break;

        case 'merge':
            console.log('Mode: merge. Merging with .gitignore.');
            lines = (existingContent + '\n' + newContent).split('\n');
            // In 'merge' mode, we always dedup and sort to ensure a clean and predictable file.
            console.log('Merge mode enforces sorting and deduplication.');
            finalContent = [...new Set(lines.filter(line => line.trim() !== ''))].sort().join('\n');
            break;

        default:
            console.error(`Error: Unknown GITIGNORE_MODE "${mode}".`);
            process.exit(1);
    }

    /**
     * Processes the combined lines for deduplication and sorting.
     * This function is only used in 'append' mode.
     */
    function processLines() {
        if (dedup) {
            console.log('Deduplication enabled.');
            const uniqueLines = [];
            const seen = new Set();
            // Iterate backwards to keep the *first* occurrence of a rule, which is standard .gitignore behavior.
            for (let i = lines.length - 1; i >= 0; i--) {
                const line = lines[i];
                const trimmedLine = line.trim();
                // Always preserve comments and blank lines.
                if (trimmedLine === '' || trimmedLine.startsWith('#')) {
                    uniqueLines.unshift(line);
                } else {
                    // Only add rules that have not been seen before.
                    if (!seen.has(trimmedLine)) {
                        uniqueLines.unshift(line);
                        seen.add(trimmedLine);
                    }
                }
            }
            lines = uniqueLines;
        }

        if (sort) {
            console.log('Sort enabled.');
            // Note: This is a simple line-by-line sort and will not preserve comment-rule groupings.
            // This is a known limitation for simplicity.
            lines.sort();
        }
        finalContent = lines.join('\n');
    }

    // Write the final, processed content back to the .gitignore file.
    fs.writeFileSync(gitignorePath, finalContent, 'utf8');
    console.log('.gitignore file has been successfully updated.');
}

main();

// Generated by Gemini
